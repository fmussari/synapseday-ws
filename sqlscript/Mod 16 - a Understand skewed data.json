{
	"name": "Mod 16 - a Understand skewed data",
	"properties": {
		"description": "https://docs.microsoft.com/en-us/learn/modules/analyze-optimize-data-warehouse-storage-azure-synapse-analytics/2-understand-skewed-data-space-usage",
		"folder": {
			"name": "ASA 30 days Challenge"
		},
		"content": {
			"query": "-- Understand skewed data and space usage\n-- https://docs.microsoft.com/en-us/learn/modules/analyze-optimize-data-warehouse-storage-azure-synapse-analytics/2-understand-skewed-data-space-usage\n\n\n\n-- Find data skew for a distributed table\nDBCC PDW_SHOWSPACEUSED('wwi.FactSale');\n\n\nDBCC PDW_SHOWSPACEUSED('wwi_perf.FactSale_Fast');\nDBCC PDW_SHOWSPACEUSED('wwi_perf.FactSale_Slow');\n\n\nDBCC PDW_SHOWSPACEUSED('wwi_perf.Sale_NoHash_Clustrd');\nDBCC PDW_SHOWSPACEUSED('wwi_perf.Sale_NoNothing');\nDBCC PDW_SHOWSPACEUSED('wwi_perf.Sale_Hash_Clustrd');\n-- Notable c칩mo el Hash desbalancea los nodos\n-- Sale_NoHash_Clustrd fue la que retorn칩 los queries m치s r치pido\n-- Clustrd es CLUSTERED COLUMNSTORE INDEX\n\n-- https://docs.microsoft.com/en-us/learn/modules/analyze-optimize-data-warehouse-storage-azure-synapse-analytics/3-exercise-check-for-skewed-data-space-usage\n\n\n---------------------------------\nSELECT TOP 1000\n    CustomerKey,\n    count(*) as TransactionItemsCount\nFROM\n    [wwi_perf].[FactSale_Fast]\nGROUP BY\n    CustomerKey\nORDER BY\n    count(*) DESC\n\n-- Total execution time: 00:00:06.478\n---------------------------------\n\nSELECT TOP 1000\n    CustomerKey,\n    count(*) as TransactionItemsCount\nFROM\n    [wwi_perf].[FactSale_Slow]\nGROUP BY\n    CustomerKey\nORDER BY\n    count(*) DESC\n-- Total execution time: 00:00:06.490\n---------------------------------\n\n\n---------------------------------\nSELECT\n    T.TransactionItemsCountBucket\n    ,count(*) as CustomersCount\nFROM\n    (\n        SELECT\n            CustomerKey,\n            (count(*) - 16) / 100 as TransactionItemsCountBucket\n        FROM\n            [wwi_perf].[FactSale_Slow]\n        GROUP BY\n            CustomerKey\n    ) T\nGROUP BY\n    T.TransactionItemsCountBucket\nORDER BY\n    T.TransactionItemsCountBucket\n\n\n-----------------------------------------------------------\n-----------------------------------------------------------\n-----------------------------------------------------------\ncreate view [wwi_perf].[vColumnStoreRowGroupStats]\nas\nwith cte\nas\n(\nselect   tb.[name]                    AS [logical_table_name]\n,        rg.[row_group_id]            AS [row_group_id]\n,        rg.[state]                   AS [state]\n,        rg.[state_desc]              AS [state_desc]\n,        rg.[total_rows]              AS [total_rows]\n,        rg.[trim_reason_desc]        AS trim_reason_desc\n,        mp.[physical_name]           AS physical_name\nFROM    sys.[schemas] sm\nJOIN    sys.[tables] tb               ON  sm.[schema_id]          = tb.[schema_id]\nJOIN    sys.[pdw_table_mappings] mp   ON  tb.[object_id]          = mp.[object_id]\nJOIN    sys.[pdw_nodes_tables] nt     ON  nt.[name]               = mp.[physical_name]\nJOIN    sys.[dm_pdw_nodes_db_column_store_row_group_physical_stats] rg      ON  rg.[object_id]     = nt.[object_id]\n                                                                            AND rg.[pdw_node_id]   = nt.[pdw_node_id]\n                                        AND rg.[distribution_id]    = nt.[distribution_id]\n)\nselect *\nfrom cte;\n--- -- --- -- --- -- ---\nSELECT\n    *\nFROM\n    [wwi_perf].[vColumnStoreRowGroupStats]\nWHERE\n    Logical_Table_Name = 'FactSale'",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "SQLPool01",
				"poolName": "SQLPool01"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}